Notes:
1. Intro
找出重复捐赠者的区域，计算他们捐了多少。
只能使用zipcode，不能使用具体的个人信息。
2. Challenge Summary
输出一个文件repeat_donors.txt
对每一个recipient, zipcode, calendar year计算：
	- total dollars received
	- total number of contributions received
	- donation amount in given percentile
需求
	- 找出多年都有捐赠的人。
	- outlier????? -> allow for a variable percentile. 
	- one run; another???
其他工程师将负责UI。
你的工作Data Pipeline, 将数据提交给前端。只要提供信息就好，不需要前端技术。
可以假定有另外一个进程会将你写入output file的内容传递给前端。
你只要写出output就好。
3. Details
两个输入文件：
	- percentile.txt 包含一个值，即要求你程序计算的百分数。
	- itcont.txt 每个捐献都占一行，特定日期、捐赠者、政治活动、委员会or类似实体
itcont.txt 以|分割字段，提取
	- contributor's name
	- zip code associated with the donor
	- amount contributed
	- date of transaction
	- ID of receipient
识别重复的捐赠者
	如果一个捐赠者在之前的任何一年捐赠过itcont文件中的任何一个recipient，就视为重复的捐赠者。
		- 先形成一个(recipient, year)
	如果两个捐赠者的name、zip code都相同，就视为同一个捐赠者
计算
	每一行看作一条记录
	看成流数据，也就是说，程序处理记录，要按照记录在文件中的顺序进行处理。
	对于每个之前捐赠过的人，计算
		- running percentile of contributions from repeat donors
		- total number of transactions from repeat donors
		- total amount of donations streaming in from repeat donors so far for that calendar year
		- recipient
		- zip code
	计算出的值用 | 分割，打印在输出文件上，顺序与输入文件上的捐赠顺序一致。
3. 输入文件 https://classic.fec.gov/finance/disclosure/ftpdet.shtml
	只对individual donation感兴趣
	
	CMTE_ID: identifies the flier, which for our purposes is the recipient of this contribution
	NAME: name of the donor
	ZIP_CODE: zip code of the contributor (we only want the first five digits/characters)
	TRANSACTION_DT: date of the transaction
	TRANSACTION_AMT: amount of the transaction
	OTHER_ID: a field that denotes whether contribution came from a person or an entity
	
	- zip code 只考虑前5位
	- combine NAME and 5 digits ZIP CODE 识别unique donor
	- input data follow data dictionary        
		https://classic.fec.gov/finance/disclosure/metadata/DataDictionaryContributionsbyIndividuals.shtml
		For the purposes of this challenge, you can assume the input file follows the data dictionary noted by the FEC for the 2015-current election years, although you should not assume the year field holds any particular value
	- 输入文件没有顺序， 时间上乱序
	- 只考虑OTHER_ID为空的记录
	- 不考虑
		- TRANSACTION_DT无效(e.g., empty, malformed畸形)
		- ZIP_CODE无效， (i.e., empty, fewer than five digits)
		- NAME无效(e.g., empty, malformed畸形)
		- CMTE_ID为空
		- TRANSACTION_AMT为空
	- 不用考虑记录重复
4. 输出文件
	- 用 | 分割
	- 包含
		- recipient of the contribution (or CMTE_ID from the input file)
		- 5-digit zip code of the contributor (or the first five characters of the ZIP_CODE field from the input file)
		- 4-digit year of the contribution
		- running percentile of contributions received from repeat donors to a recipient streamed in so far for this zip code and calendar year. Percentile calculations should be rounded to the whole dollar (drop anything below $.50 and round anything from $.50 and up to the next dollar)四舍五入
		- total amount of contributions received by recipient from the contributor's zip code streamed in so far in this calendar year from repeat donors
		- total number of transactions received by recipient from the contributor's zip code streamed in so far this calendar year from repeat donors
5. Percentile
	The first line of percentile.txt contains the percentile you should compute for these given input pair. For the percentile computation use the nearest-rank method as described by Wikipedia.
6. Clean, Scalable, well-tested code
	- scales for large amounts of data
	- unit tests
	- README
		summarize your approach, dependencies, run instructions
7. Repo directory structure
	├── README.md 
	├── run.sh
	├── src
	│   └── donation-analytics.py
	├── input
	│   └── percentile.txt
	│   └── itcont.txt
	├── output
	|   └── repeat_donors.txt
	├── insight_testsuite
	    └── run_tests.sh
	    └── tests
	        └── test_1
	        |   ├── input
	        |   │   └── percentile.txt
	        |   │   └── itcont.txt
	        |   |__ output
	        |   │   └── repeat_donors.txt
	        ├── your-own-test_1
	            ├── input
	            │   └── your-own-input-for-itcont.txt
	            |── output
	                └── repeat_donors.txt
8. 
Instructions to submit your solution
	To submit your entry please use the link you received in your coding challenge invite email
	You will only be able to submit through the link one time
	Do NOT attach a file - we will not admit solutions which are attached files
	Use the submission box to enter the link to your GitHub repo or Bitbucket ONLY
	Link to the specific repo for this project, not your general profile
	Put any comments in the README inside your project repo, not in the submission box
	We are unable to accept coding challenges that are emailed to us



1.
CMTE_ID: C00629618
NAME: PEREZ, JOHN A
ZIP_CODE: 90017
TRANSACTION_DT: 01032017
TRANSACTION_AMT: 40
OTHER_ID: H6CA34245

2.
CMTE_ID: C00177436
NAME: DEEHAN, WILLIAM N
ZIP_CODE: 30004
TRANSACTION_DT: 01312017
TRANSACTION_AMT: 384
OTHER_ID: empty

3. 
CMTE_ID: C00384818
NAME: ABBOTT, JOSEPH
ZIP_CODE: 02895
TRANSACTION_DT: 01122017
TRANSACTION_AMT: 250
OTHER_ID: empty

4.
CMTE_ID: C00384516
NAME: SABOURIN, JAMES
ZIP_CODE: 02895
TRANSACTION_DT: 01312017
TRANSACTION_AMT: 230
OTHER_ID: empty

5.
CMTE_ID: C00177436
NAME: JEROME, CHRISTOPHER
ZIP_CODE: 30750
TRANSACTION_DT: 10312017
TRANSACTION_AMT: 384
OTHER_ID: empty

6.
CMTE_ID: C00384516
NAME: ABBOTT, JOSEPH 
ZIP_CODE: 02895
TRANSACTION_DT: 01122018
TRANSACTION_AMT: 333
OTHER_ID: empty

7.
CMTE_ID: C00384516
NAME: SABOURIN, JAMES
ZIP_CODE: 02895
TRANSACTION_DT: 01312018
TRANSACTION_AMT: 384
OTHER_ID: empty


